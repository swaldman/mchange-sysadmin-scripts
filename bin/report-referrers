#!/usr/bin/env -S scala-cli shebang --server=false  --suppress-directives-in-multiple-files-warning

//> using file ../project.scala

if args.length != 2 then
  System.err.println(s"${scriptPath} <nginx-access-log-maybe-gz> <filter>")
  System.exit(3)

val filePath = args(0)
val filter = args(1)

import java.io.*
import java.time.Instant
import java.time.format.DateTimeFormatter
import java.util.zip.GZIPInputStream
import scala.io.Source
import scala.util.Using
import com.mchange.sysadmin.nginx

def bufferedStreamFromFile( filePath : String) : InputStream =
  new BufferedInputStream(
    new FileInputStream(
      new File(args(0))
    )
  )

def bufferedStreamFromGzipFile( filePath : String ) : InputStream =
  new GZIPInputStream( bufferedStreamFromFile( filePath ) )

def inputStream =
  if filePath.endsWith(".gz") then
    bufferedStreamFromGzipFile( filePath )
  else
    bufferedStreamFromFile( filePath )

case class PathReferrer( path : String, referrer : String )

Using.resource( Source.fromInputStream( inputStream ) ): source => 
  val pathReferrers =
    source.getLines
      .map( nginx.AccessLogEntry.apply )
      .collect { // only referrers to resources we actually at least kind of have
        case entry @ nginx.AccessLogEntry(_, _, _, _, hc, _, Some( goodReferrer ), _) if hc / 100 == 2 || hc / 100 == 3 =>
          PathReferrer( entry.requestPath, goodReferrer )
      }
      .filterNot( _.referrer.indexOf( filter ) >= 0 )
      .toSeq
  val pathReferrersToCounts =
    pathReferrers.groupBy( identity ).view.mapValues( seq => seq.size ).toMap
  val reportTups =
    pathReferrersToCounts
    .toSeq
    .collect { case ( PathReferrer( p, r ), c ) => (c, r, p) }
    .sorted( summon[Ordering[Tuple3[Int,String,String]]].reverse )

  println("Referrers (and counts):")
  reportTups.foreach: (c,r,p) =>
    println( s"  ${r} --> ${p} (${c})" )




